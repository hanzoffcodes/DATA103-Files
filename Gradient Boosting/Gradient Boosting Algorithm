{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# **Gradient Boosting Algorithm**\n","\n","GROUP 7\n","1. DIONISIO, GERYCO\n","2. NAVARRO, CARL\n","3. QUE, MICHAEL DAVE\n","4. TAGABUCBA, HANZ ADRIAN"],"metadata":{"id":"8IKK4uU0RBUn"}},{"cell_type":"markdown","source":["Assignment (by group)\n","Create your own functions to execute Gradient Boosting Algorithm.\n","1. You may use SKLearn on data processing and data splitting\n","2. No libraries except pandas and numpy to build your function\n","\n","Write a short description of the algorithm and the pseudo\n","code for it.\n","\n","Describe how this differs from random forests\n","in terms of making final forecast and overall logic\n","Use this as your dataset. Target column would be be the\n","“stroke” column"],"metadata":{"id":"fh5y0ceOVPWO"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"80NIFKTVUtmz"},"outputs":[],"source":["import pandas as pd #import all necessary libraries for eda and preporocessing\n","import numpy as np\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import OneHotEncoder\n","from sklearn.metrics import classification_report, confusion_matrix"]},{"cell_type":"code","source":["from google.colab import drive #mount notebook to gdrive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nX5BHHCl1Vzj","executionInfo":{"status":"ok","timestamp":1731764275858,"user_tz":-480,"elapsed":4403,"user":{"displayName":"Michael Dave Que","userId":"11606895052938135263"}},"outputId":"bf270289-6595-4b68-ff9e-10184722f372"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["file_path = '/content/drive/Shareddrives/DATA103_DATA/healthcare-dataset-stroke-data.csv'\n","\n","df = pd.read_csv(file_path)"],"metadata":{"id":"V6TJiN1F1Zt6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"R-GJ2alB1aBa","executionInfo":{"status":"ok","timestamp":1731764277015,"user_tz":-480,"elapsed":1158,"user":{"displayName":"Michael Dave Que","userId":"11606895052938135263"}},"outputId":"0a6656ac-0b1b-41b2-8932-5eb4a7308a18"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["         id  gender   age  hypertension  heart_disease ever_married  \\\n","0      9046    Male  67.0             0              1          Yes   \n","1     51676  Female  61.0             0              0          Yes   \n","2     31112    Male  80.0             0              1          Yes   \n","3     60182  Female  49.0             0              0          Yes   \n","4      1665  Female  79.0             1              0          Yes   \n","...     ...     ...   ...           ...            ...          ...   \n","5105  18234  Female  80.0             1              0          Yes   \n","5106  44873  Female  81.0             0              0          Yes   \n","5107  19723  Female  35.0             0              0          Yes   \n","5108  37544    Male  51.0             0              0          Yes   \n","5109  44679  Female  44.0             0              0          Yes   \n","\n","          work_type Residence_type  avg_glucose_level   bmi   smoking_status  \\\n","0           Private          Urban             228.69  36.6  formerly smoked   \n","1     Self-employed          Rural             202.21   NaN     never smoked   \n","2           Private          Rural             105.92  32.5     never smoked   \n","3           Private          Urban             171.23  34.4           smokes   \n","4     Self-employed          Rural             174.12  24.0     never smoked   \n","...             ...            ...                ...   ...              ...   \n","5105        Private          Urban              83.75   NaN     never smoked   \n","5106  Self-employed          Urban             125.20  40.0     never smoked   \n","5107  Self-employed          Rural              82.99  30.6     never smoked   \n","5108        Private          Rural             166.29  25.6  formerly smoked   \n","5109       Govt_job          Urban              85.28  26.2          Unknown   \n","\n","      stroke  \n","0          1  \n","1          1  \n","2          1  \n","3          1  \n","4          1  \n","...      ...  \n","5105       0  \n","5106       0  \n","5107       0  \n","5108       0  \n","5109       0  \n","\n","[5110 rows x 12 columns]"],"text/html":["\n","  <div id=\"df-83e141cf-6061-4e20-9f04-32485ac3fa19\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>gender</th>\n","      <th>age</th>\n","      <th>hypertension</th>\n","      <th>heart_disease</th>\n","      <th>ever_married</th>\n","      <th>work_type</th>\n","      <th>Residence_type</th>\n","      <th>avg_glucose_level</th>\n","      <th>bmi</th>\n","      <th>smoking_status</th>\n","      <th>stroke</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>9046</td>\n","      <td>Male</td>\n","      <td>67.0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Yes</td>\n","      <td>Private</td>\n","      <td>Urban</td>\n","      <td>228.69</td>\n","      <td>36.6</td>\n","      <td>formerly smoked</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>51676</td>\n","      <td>Female</td>\n","      <td>61.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Yes</td>\n","      <td>Self-employed</td>\n","      <td>Rural</td>\n","      <td>202.21</td>\n","      <td>NaN</td>\n","      <td>never smoked</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>31112</td>\n","      <td>Male</td>\n","      <td>80.0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Yes</td>\n","      <td>Private</td>\n","      <td>Rural</td>\n","      <td>105.92</td>\n","      <td>32.5</td>\n","      <td>never smoked</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>60182</td>\n","      <td>Female</td>\n","      <td>49.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Yes</td>\n","      <td>Private</td>\n","      <td>Urban</td>\n","      <td>171.23</td>\n","      <td>34.4</td>\n","      <td>smokes</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1665</td>\n","      <td>Female</td>\n","      <td>79.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>Yes</td>\n","      <td>Self-employed</td>\n","      <td>Rural</td>\n","      <td>174.12</td>\n","      <td>24.0</td>\n","      <td>never smoked</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>5105</th>\n","      <td>18234</td>\n","      <td>Female</td>\n","      <td>80.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>Yes</td>\n","      <td>Private</td>\n","      <td>Urban</td>\n","      <td>83.75</td>\n","      <td>NaN</td>\n","      <td>never smoked</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>5106</th>\n","      <td>44873</td>\n","      <td>Female</td>\n","      <td>81.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Yes</td>\n","      <td>Self-employed</td>\n","      <td>Urban</td>\n","      <td>125.20</td>\n","      <td>40.0</td>\n","      <td>never smoked</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>5107</th>\n","      <td>19723</td>\n","      <td>Female</td>\n","      <td>35.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Yes</td>\n","      <td>Self-employed</td>\n","      <td>Rural</td>\n","      <td>82.99</td>\n","      <td>30.6</td>\n","      <td>never smoked</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>5108</th>\n","      <td>37544</td>\n","      <td>Male</td>\n","      <td>51.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Yes</td>\n","      <td>Private</td>\n","      <td>Rural</td>\n","      <td>166.29</td>\n","      <td>25.6</td>\n","      <td>formerly smoked</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>5109</th>\n","      <td>44679</td>\n","      <td>Female</td>\n","      <td>44.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Yes</td>\n","      <td>Govt_job</td>\n","      <td>Urban</td>\n","      <td>85.28</td>\n","      <td>26.2</td>\n","      <td>Unknown</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5110 rows × 12 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-83e141cf-6061-4e20-9f04-32485ac3fa19')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-83e141cf-6061-4e20-9f04-32485ac3fa19 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-83e141cf-6061-4e20-9f04-32485ac3fa19');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-c11126e3-a1d5-4b1b-813f-7f744cf7f1f8\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c11126e3-a1d5-4b1b-813f-7f744cf7f1f8')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-c11126e3-a1d5-4b1b-813f-7f744cf7f1f8 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_abf1d6d3-e611-4a47-b6a5-ec55dfbefcba\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_abf1d6d3-e611-4a47-b6a5-ec55dfbefcba button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 5110,\n  \"fields\": [\n    {\n      \"column\": \"id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 21161,\n        \"min\": 67,\n        \"max\": 72940,\n        \"num_unique_values\": 5110,\n        \"samples\": [\n          40041,\n          55244,\n          70992\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Male\",\n          \"Female\",\n          \"Other\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 22.61264672311352,\n        \"min\": 0.08,\n        \"max\": 82.0,\n        \"num_unique_values\": 104,\n        \"samples\": [\n          45.0,\n          24.0,\n          33.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hypertension\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"heart_disease\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ever_married\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"No\",\n          \"Yes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"work_type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Self-employed\",\n          \"Never_worked\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Residence_type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Rural\",\n          \"Urban\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avg_glucose_level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 45.28356015058203,\n        \"min\": 55.12,\n        \"max\": 271.74,\n        \"num_unique_values\": 3979,\n        \"samples\": [\n          178.29,\n          156.69\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bmi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.854066729680158,\n        \"min\": 10.3,\n        \"max\": 97.6,\n        \"num_unique_values\": 418,\n        \"samples\": [\n          49.5,\n          18.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smoking_status\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"never smoked\",\n          \"Unknown\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"stroke\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":42}]},{"cell_type":"code","source":["df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BEKCQGEz32u2","executionInfo":{"status":"ok","timestamp":1731764277015,"user_tz":-480,"elapsed":4,"user":{"displayName":"Michael Dave Que","userId":"11606895052938135263"}},"outputId":"61d1c329-3ff6-448d-c821-c935d9b26253"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 5110 entries, 0 to 5109\n","Data columns (total 12 columns):\n"," #   Column             Non-Null Count  Dtype  \n","---  ------             --------------  -----  \n"," 0   id                 5110 non-null   int64  \n"," 1   gender             5110 non-null   object \n"," 2   age                5110 non-null   float64\n"," 3   hypertension       5110 non-null   int64  \n"," 4   heart_disease      5110 non-null   int64  \n"," 5   ever_married       5110 non-null   object \n"," 6   work_type          5110 non-null   object \n"," 7   Residence_type     5110 non-null   object \n"," 8   avg_glucose_level  5110 non-null   float64\n"," 9   bmi                4909 non-null   float64\n"," 10  smoking_status     5110 non-null   object \n"," 11  stroke             5110 non-null   int64  \n","dtypes: float64(3), int64(4), object(5)\n","memory usage: 479.2+ KB\n"]}]},{"cell_type":"code","source":["sns.heatmap(df.isnull(), cbar=False, cmap=\"viridis\")\n","plt.title(\"Missing Data\")\n","plt.show() #displays the missing data in BMI"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"9C9XK_ki4rtt","executionInfo":{"status":"ok","timestamp":1731764278126,"user_tz":-480,"elapsed":1113,"user":{"displayName":"Michael Dave Que","userId":"11606895052938135263"}},"outputId":"c0be407b-42a1-4dc2-8c12-8a344c471b6b"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["from sklearn.impute import KNNImputer\n","\n","\n","numeric_columns = df.select_dtypes(include=['float64', 'int64']).columns\n","imputer = KNNImputer(n_neighbors=5) #Estimate the value of missing data based on the ave their 5 nearest neighbors\n","\n","df[numeric_columns] = imputer.fit_transform(df[numeric_columns]) #This line replaces missing values with the imputed values."],"metadata":{"id":"wyLVaiwz8P7P"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Based on the dataset info() and the missing data heatmap, the dataset contains missing values in the bmi feature of the dataset. To address this, imputation was applied, which estimates the values of the missing data by nearest neighbor."],"metadata":{"id":"sHPqMWMZGsRK"}},{"cell_type":"markdown","source":[],"metadata":{"id":"B4W0ZE8kGmZE"}},{"cell_type":"code","source":["df = df.drop(columns=\"id\") #drop ID col since it is not relevant to the model.\n","df['gender'] = df['gender']. apply(lambda x: 1 if x == \"Male\" else 0) #convert gender, married status, and residence data to numerical/ binary\n","df['ever_married'] = df['ever_married']. apply(lambda x: 1 if x == \"Yes\" else 0)\n","df['Residence_type'] = df['Residence_type']. apply(lambda x: 1 if x == \"Urban\" else 0)"],"metadata":{"id":"Rf1Yvqj68EYW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["multi_features = ['work_type','smoking_status'] #Defines a list of column names to be encoded\n","encoder = OneHotEncoder(handle_unknown='ignore') #Converts categorical variables into one-hot encoded format\n","multi_encoded = encoder.fit_transform(df[multi_features]) #Fits the encoder to the categorical data then transforms into one-hot encoder format\n","multi_df = pd.DataFrame(multi_encoded.todense(), columns=encoder.get_feature_names_out())\n","multi_df = multi_df.astype(int) #Convert the one-hot encoded columns to integers\n","\n","df.drop(multi_features, axis=1, inplace=True)\n","df = pd.concat([df, multi_df], axis=1)\n","df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":243},"id":"BYPfepf88JNk","executionInfo":{"status":"ok","timestamp":1731764278431,"user_tz":-480,"elapsed":7,"user":{"displayName":"Michael Dave Que","userId":"11606895052938135263"}},"outputId":"4f038980-2e98-415a-e4ff-e9150647b18e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   gender   age  hypertension  heart_disease  ever_married  Residence_type  \\\n","0       1  67.0           0.0            1.0             1               1   \n","1       0  61.0           0.0            0.0             1               0   \n","2       1  80.0           0.0            1.0             1               0   \n","3       0  49.0           0.0            0.0             1               1   \n","4       0  79.0           1.0            0.0             1               0   \n","\n","   avg_glucose_level    bmi  stroke  work_type_Govt_job  \\\n","0             228.69  36.60     1.0                   0   \n","1             202.21  28.08     1.0                   0   \n","2             105.92  32.50     1.0                   0   \n","3             171.23  34.40     1.0                   0   \n","4             174.12  24.00     1.0                   0   \n","\n","   work_type_Never_worked  work_type_Private  work_type_Self-employed  \\\n","0                       0                  1                        0   \n","1                       0                  0                        1   \n","2                       0                  1                        0   \n","3                       0                  1                        0   \n","4                       0                  0                        1   \n","\n","   work_type_children  smoking_status_Unknown  smoking_status_formerly smoked  \\\n","0                   0                       0                               1   \n","1                   0                       0                               0   \n","2                   0                       0                               0   \n","3                   0                       0                               0   \n","4                   0                       0                               0   \n","\n","   smoking_status_never smoked  smoking_status_smokes  \n","0                            0                      0  \n","1                            1                      0  \n","2                            1                      0  \n","3                            0                      1  \n","4                            1                      0  "],"text/html":["\n","  <div id=\"df-811ff414-64f9-4b45-a1fb-438a9fd84730\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>gender</th>\n","      <th>age</th>\n","      <th>hypertension</th>\n","      <th>heart_disease</th>\n","      <th>ever_married</th>\n","      <th>Residence_type</th>\n","      <th>avg_glucose_level</th>\n","      <th>bmi</th>\n","      <th>stroke</th>\n","      <th>work_type_Govt_job</th>\n","      <th>work_type_Never_worked</th>\n","      <th>work_type_Private</th>\n","      <th>work_type_Self-employed</th>\n","      <th>work_type_children</th>\n","      <th>smoking_status_Unknown</th>\n","      <th>smoking_status_formerly smoked</th>\n","      <th>smoking_status_never smoked</th>\n","      <th>smoking_status_smokes</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>67.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>228.69</td>\n","      <td>36.60</td>\n","      <td>1.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>61.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>202.21</td>\n","      <td>28.08</td>\n","      <td>1.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>80.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>105.92</td>\n","      <td>32.50</td>\n","      <td>1.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","      <td>49.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>171.23</td>\n","      <td>34.40</td>\n","      <td>1.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>79.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>174.12</td>\n","      <td>24.00</td>\n","      <td>1.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-811ff414-64f9-4b45-a1fb-438a9fd84730')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-811ff414-64f9-4b45-a1fb-438a9fd84730 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-811ff414-64f9-4b45-a1fb-438a9fd84730');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-95f26d6f-25db-454c-90a9-8453604d3148\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-95f26d6f-25db-454c-90a9-8453604d3148')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-95f26d6f-25db-454c-90a9-8453604d3148 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 5110,\n  \"fields\": [\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 22.61264672311352,\n        \"min\": 0.08,\n        \"max\": 82.0,\n        \"num_unique_values\": 104,\n        \"samples\": [\n          45.0,\n          24.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hypertension\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.29660667423378534,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"heart_disease\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.22606298750336476,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ever_married\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Residence_type\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avg_glucose_level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 45.28356015058203,\n        \"min\": 55.12,\n        \"max\": 271.74,\n        \"num_unique_values\": 3979,\n        \"samples\": [\n          178.29,\n          156.69\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bmi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.740320367075367,\n        \"min\": 10.3,\n        \"max\": 97.6,\n        \"num_unique_values\": 557,\n        \"samples\": [\n          39.3,\n          29.419999999999998\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"stroke\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.21531985698026107,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"work_type_Govt_job\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"work_type_Never_worked\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"work_type_Private\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"work_type_Self-employed\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"work_type_children\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smoking_status_Unknown\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smoking_status_formerly smoked\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smoking_status_never smoked\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smoking_status_smokes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":47}]},{"cell_type":"code","source":["df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uRl12JuX8VXJ","executionInfo":{"status":"ok","timestamp":1731764278432,"user_tz":-480,"elapsed":6,"user":{"displayName":"Michael Dave Que","userId":"11606895052938135263"}},"outputId":"106af2eb-287d-48dd-ff9b-4f7c5e31b2fd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 5110 entries, 0 to 5109\n","Data columns (total 18 columns):\n"," #   Column                          Non-Null Count  Dtype  \n","---  ------                          --------------  -----  \n"," 0   gender                          5110 non-null   int64  \n"," 1   age                             5110 non-null   float64\n"," 2   hypertension                    5110 non-null   float64\n"," 3   heart_disease                   5110 non-null   float64\n"," 4   ever_married                    5110 non-null   int64  \n"," 5   Residence_type                  5110 non-null   int64  \n"," 6   avg_glucose_level               5110 non-null   float64\n"," 7   bmi                             5110 non-null   float64\n"," 8   stroke                          5110 non-null   float64\n"," 9   work_type_Govt_job              5110 non-null   int64  \n"," 10  work_type_Never_worked          5110 non-null   int64  \n"," 11  work_type_Private               5110 non-null   int64  \n"," 12  work_type_Self-employed         5110 non-null   int64  \n"," 13  work_type_children              5110 non-null   int64  \n"," 14  smoking_status_Unknown          5110 non-null   int64  \n"," 15  smoking_status_formerly smoked  5110 non-null   int64  \n"," 16  smoking_status_never smoked     5110 non-null   int64  \n"," 17  smoking_status_smokes           5110 non-null   int64  \n","dtypes: float64(6), int64(12)\n","memory usage: 718.7 KB\n"]}]},{"cell_type":"code","source":["import numpy as np  # Importing NumPy for numerical operations\n","\n","# Simple Decision Tree class for regression tasks\n","class SimpleDecisionTree:\n","    def __init__(self, max_depth=1):\n","        # Initialize the decision tree with a max depth parameter\n","        self.max_depth = max_depth\n","        self.tree = None  # This will hold the tree structure after fitting\n","\n","    def fit(self, X, y):\n","        # Fit the model to the data (X = features, y = target values)\n","        self.tree = self._build_tree(X, y)\n","\n","    def _build_tree(self, X, y, depth=0):\n","        # Recursively build the decision tree\n","        n_samples, n_features = X.shape  # Get the number of samples and features\n","\n","        # If there are no samples or we've reached the max depth, return the mean of y (regression task)\n","        if n_samples == 0 or depth == self.max_depth:\n","            return np.mean(y)\n","\n","        # Find the best feature and threshold to split on\n","        best_feature, best_threshold = self._best_split(X, y)\n","\n","        # If no valid split is found, return the mean of y\n","        if best_feature is None:\n","            return np.mean(y)\n","\n","        # Split the dataset into left and right branches based on the best split\n","        left_indices = X[:, best_feature] < best_threshold\n","        right_indices = X[:, best_feature] >= best_threshold\n","\n","        # Recursively build left and right subtrees\n","        left_subtree = self._build_tree(X[left_indices], y[left_indices], depth + 1)\n","        right_subtree = self._build_tree(X[right_indices], y[right_indices], depth + 1)\n","\n","        # Return the decision node, which includes the best feature, threshold, and subtrees\n","        return (best_feature, best_threshold, left_subtree, right_subtree)\n","\n","    def _best_split(self, X, y):\n","        # Find the best feature and threshold to split the data based on minimizing mean squared error (MSE)\n","        n_samples, n_features = X.shape\n","        best_feature, best_threshold = None, None\n","        min_mse = float(\"inf\")  # Start with an infinitely high MSE\n","\n","        # Loop through each feature to find the best split\n","        for feature in range(n_features):\n","            thresholds = np.unique(X[:, feature])  # Get unique values for the feature\n","\n","            # Loop through each threshold for the current feature\n","            for threshold in thresholds:\n","                left_indices = X[:, feature] < threshold  # Left branch: values less than threshold\n","                right_indices = X[:, feature] >= threshold  # Right branch: values greater or equal to threshold\n","\n","                # If either branch is empty, skip this threshold\n","                if len(y[left_indices]) == 0 or len(y[right_indices]) == 0:\n","                    continue\n","\n","                # Calculate the mean squared error for this split\n","                mse = self._calculate_mse(y, left_indices, right_indices)\n","                # If this split has a lower MSE, update the best split\n","                if mse < min_mse:\n","                    min_mse = mse\n","                    best_feature = feature\n","                    best_threshold = threshold\n","\n","        # Return the best feature and threshold\n","        return best_feature, best_threshold\n","\n","    def _calculate_mse(self, y, left_indices, right_indices):\n","        # Calculate the mean squared error for a split\n","        left_mean = np.mean(y[left_indices])  # Mean of the left branch\n","        right_mean = np.mean(y[right_indices])  # Mean of the right branch\n","        left_mse = np.mean((y[left_indices] - left_mean) ** 2)  # MSE for the left branch\n","        right_mse = np.mean((y[right_indices] - right_mean) ** 2)  # MSE for the right branch\n","        return left_mse + right_mse  # Return the total MSE (sum of left and right MSE)\n","\n","    def predict(self, X):\n","        # Predict the target values for each sample in X\n","        return np.array([self._predict_single(sample) for sample in X])\n","\n","    def _predict_single(self, sample):\n","        # Predict the target value for a single sample by traversing the tree\n","        node = self.tree\n","        # Traverse the tree until we reach a leaf (mean value)\n","        while isinstance(node, tuple):\n","            feature, threshold, left_subtree, right_subtree = node\n","            if sample[feature] < threshold:  # Go left if the sample's feature is less than the threshold\n","                node = left_subtree\n","            else:  # Go right if the sample's feature is greater or equal to the threshold\n","                node = right_subtree\n","        return node  # Return the mean value at the leaf node\n","\n","\n","# Gradient Boosting class for classification\n","class GradientBoosting:\n","    def __init__(self, n_estimators=100, learning_rate=0.1, max_depth=1):\n","        # Initialize the Gradient Boosting model with parameters for the number of estimators (trees), learning rate, and max depth\n","        self.n_estimators = n_estimators\n","        self.learning_rate = learning_rate\n","        self.max_depth = max_depth\n","        self.models = []  # List to hold the trained trees\n","        self.base_prediction = None  # This will hold the initial model prediction (log-odds)\n","\n","    def sigmoid(self, z):\n","        # Sigmoid function to convert raw predictions into probabilities\n","        return 1 / (1 + np.exp(-z))\n","\n","    def fit(self, X, y):\n","        # Fit the Gradient Boosting model to the data\n","        # Initialize with the log-odds (logit) of the base prediction\n","        self.base_prediction = np.log(np.mean(y) / (1 - np.mean(y)))\n","        y_pred = np.full(y.shape, self.base_prediction)  # Initialize predictions with the base prediction\n","\n","        # Perform boosting for n_estimators iterations\n","        for _ in range(self.n_estimators):\n","            # Compute the residuals, which are the negative gradients of the logistic loss function\n","            p = self.sigmoid(y_pred)  # Convert predictions to probabilities\n","            residuals = y - p  # Calculate residuals (difference between true values and predicted probabilities)\n","\n","            # Fit a decision tree to the residuals\n","            tree = SimpleDecisionTree(max_depth=self.max_depth)\n","            tree.fit(X, residuals)  # Fit the tree on the residuals\n","            self.models.append(tree)  # Add the tree to the list of models\n","\n","            # Update the predictions by adding the weighted predictions from the new tree\n","            y_pred += self.learning_rate * tree.predict(X)\n","\n","    def predict_proba(self, X):\n","        # Predict the probabilities for each sample in X\n","        y_pred = np.full(X.shape[0], self.base_prediction)  # Start with the base prediction\n","        for tree in self.models:\n","            y_pred += self.learning_rate * tree.predict(X)  # Add predictions from all trees\n","\n","        # Convert raw predictions to probabilities using the sigmoid function\n","        return self.sigmoid(y_pred)\n","\n","    def predict(self, X):\n","        # Convert probabilities to binary predictions (0 or 1) by thresholding at 0.5\n","        probas = self.predict_proba(X)  # Get the probabilities\n","        return (probas >= 0.5).astype(int)  # Return 1 if probability is >= 0.5, else return 0\n"],"metadata":{"id":"xwu_-GagknWX"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Gradient Boosting with Splitting of Data"],"metadata":{"id":"7m-OlXsqY-8u"}},{"cell_type":"code","source":["if __name__ == \"__main__\":\n","    import pandas as pd\n","    from imblearn.over_sampling import SMOTE\n","    from sklearn.model_selection import train_test_split\n","\n","    X = df.drop('stroke', axis=1).values\n","    y = df['stroke'].values\n","\n","    # Split the dataset into train and test sets\n","    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n","\n","    # Apply SMOTE to the training data to balance the classes\n","    smote = SMOTE(random_state=42)\n","    X_train_smote, y_train_smote = smote.fit_resample(X_train, y_train)\n","\n","    # Check the distribution after SMOTE\n","    print(\"Class distribution after SMOTE:\")\n","    print(pd.Series(y_train_smote).value_counts())\n","\n","    # Fit the Gradient Boosting model\n","    model = GradientBoosting(n_estimators=50, learning_rate=0.1, max_depth=3)\n","    model.fit(X_train_smote, y_train_smote)\n","\n","    # Make predictions\n","    predictions = model.predict(X_test)\n","\n","    # Evaluate the model\n","    print(\"Predictions:\", predictions)\n","    print(\"Predictions value counts:\")\n","    print(pd.Series(predictions).value_counts())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"c-93AA2fLvDX","executionInfo":{"status":"ok","timestamp":1731765912712,"user_tz":-480,"elapsed":1569241,"user":{"displayName":"Michael Dave Que","userId":"11606895052938135263"}},"outputId":"eb74587d-0bca-4b0c-96ba-38f7aefab731"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Class distribution after SMOTE:\n","0.0    3417\n","1.0    3417\n","Name: count, dtype: int64\n","Predictions: [1 1 1 ... 1 1 1]\n","Predictions value counts:\n","1    1332\n","0     201\n","Name: count, dtype: int64\n"]}]},{"cell_type":"code","source":[" # Confusion Matrix\n","cm = confusion_matrix(y_test, predictions)\n","print(\"Confusion Matrix:\")\n","print(cm)\n","\n","# Classification Report\n","print(\"Classification Report:\")\n","print(classification_report(y_test, predictions))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ge1E9rkgW0CW","executionInfo":{"status":"ok","timestamp":1731767644596,"user_tz":-480,"elapsed":277,"user":{"displayName":"Michael Dave Que","userId":"11606895052938135263"}},"outputId":"7d381bcc-0e23-4a52-bf5f-ae775841378f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Confusion Matrix:\n","[[ 198 1246]\n"," [   3   86]]\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","         0.0       0.99      0.14      0.24      1444\n","         1.0       0.06      0.97      0.12        89\n","\n","    accuracy                           0.19      1533\n","   macro avg       0.52      0.55      0.18      1533\n","weighted avg       0.93      0.19      0.23      1533\n","\n"]}]},{"cell_type":"markdown","source":["**Model Evalutation:** The model shows a high precision for class 0.0 (0.99), but poor recall (0.14), indicating it mostly predicts the majority class (0.0) and misses many true positives. The model struggles with class 1.0, achieving high recall (0.97) but very low precision (0.06), resulting in a low overall accuracy of 0.19."],"metadata":{"id":"dwd7S_A7Z24r"}},{"cell_type":"markdown","source":["# Brief Description of the Algorithm and the Pseudo Code\n","**Gradient Boosting** is a machine learning technique that builds strong predictive models by combining multiple weak learners, typically decision trees. The algorithm works sequentially, where each tree is trained to correct the residual errors (differences between actual and predicted values) made by the previous tree. Through this iterative process, the model minimizes errors and improves prediction accuracy.\n","\n","The implementation of Gradient Boosting in the code involves two key components: a simple decision tree (represented by the SimpleDecisionTree class) and the gradient boosting machine (represented by the GradientBoosting class).\n","\n"," 1. *SimpleDecisionTree*: This class implements a regression-based decision tree. The fit method trains the tree by recursively splitting the data at the feature and threshold that minimizes the mean squared error (MSE). The tree continues to split until the maximum depth is reached or further splits no longer reduce the MSE significantly. The tree structure is returned and used to predict values.\n","\n"," 2. *GradientBoosting*: This class implements the gradient boosting algorithm for binary classification. The fit method initializes predictions with log-odds (logistic regression) and iteratively fits a SimpleDecisionTree to the residuals (errors) of the current predictions. The residuals represent the negative gradient of the loss function. Each decision tree refines the model by predicting the residuals, and the predictions are updated by adding the scaled tree outputs, controlled by the learning rate. This iterative process continues, improving the model with each new tree in the ensemble.\n","\n","# Gradient Boosting vs Random Forest\n","The key differences between Gradient Boosting and Random Forests lie in their logic and how they make final predictions.\n","\n","**Logic.** Random Forests build multiple independent trees, each trained on random subsets of the data. The final prediction is made by averaging the outputs of all trees (for regression) or taking the majority vote (for classification). In contrast, Gradient Boosting builds trees sequentially, with each tree learning from the residuals of the previous trees, progressively correcting errors.\n","\n","In the context of predicting a target like stroke, each tree in a Random Forest would make independent predictions based on different subsets of the features, and the final prediction would be the majority vote across all trees. Meanwhile, Gradient Boosting would focus more on refining predictions where the previous trees have made errors. For example, if the first tree did not predict stroke correctly for certain groups, the next tree would specifically learn to improve those areas, progressively reducing bias.\n","\n","\n","**Strengths.** Random Forests primarily aim to reduce variance by 'averaging' predictions from multiple independent trees, helping to prevent overfitting. In contrast, Gradient Boosting focuses on reducing bias by iteratively correcting errors, often leading to more accurate results, especially for complex datasets.\n","\n","In the context of predicting whether someone has a stroke, Random Forests' charactersitic in minimizing overfitting can be especially useful for datasets like the stroke data where there are many features and interactions between them. Although Gradient Boosting might be more sensitive to overfitting, it can often achieve better performance given the likelihood of having a stroke is complex and nonlinear. Gradient Boosting would typically perform better when trying to capture intricate patterns in the data, such as the interactions between age and lifestyle factors that contribute to the likelihood of a stroke. For example, it might learn that younger individuals who smoke might not significantly increase the stroke risk, but older individuals who smoke could have a much stronger impact on risk."],"metadata":{"id":"CA7edzo85sJI"}}]}